{"/home/travis/build/npmtest/node-npmtest-grunt-convert/test.js":"/* istanbul instrument in package npmtest_grunt_convert */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-convert/lib.npmtest_grunt_convert.js":"/* istanbul instrument in package npmtest_grunt_convert */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_convert = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_convert = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-convert/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-convert && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_convert */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_convert\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_convert.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_convert.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_convert.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_convert.__dirname + '/lib.npmtest_grunt_convert.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-convert/node_modules/grunt-convert/Gruntfile.js":"/*\n * grunt-convert\n * https://github.com/assemble/grunt-convert\n *\n * Copyright (c) 2013 Jon Schlinkert\n * Licensed under the MIT license\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n\n    jshint: {\n      all: ['Gruntfile.js', 'tasks/*.js'],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n\n    convert: {\n      simple: {\n        options: {\n          indent: 8\n        },\n        src: ['test/fixtures/simple.xml'],\n        dest: 'tmp/result/simple.json'\n      },\n      custom_ext: {\n        options: {\n          type: 'xml'\n        },\n        files: [\n          {\n            expand: true,\n            cwd: 'test/fixtures/custom/',\n            src: ['*.*'],\n            dest: 'tmp/result/custom/',\n            ext: '.json'\n          }\n        ]\n      },\n      adv: {\n        options: {\n          mergeAttrs: true,\n          explicitArray: false,\n          indent: 2,\n          inline: 8\n        },\n        src: ['test/fixtures/theme.xml'],\n        dest: 'tmp/result/theme-adv.yml'\n      },\n      json2xml:{\n        options: {\n          xml: {\n            header: true\n          }\n        },\n        src: ['test/fixtures/sublime.json'],\n        dest: 'tmp/result/sublime.xml'\n      },\n      yml2json: {\n        files: [\n          {\n            expand: true,           // Enable dynamic expansion.\n            cwd: 'test/fixtures/',  // Src matches are relative to this path.\n            src: ['**/*.yml'],      // Actual pattern(s) to match.\n            dest: 'tmp/result/',    // Destination path prefix.\n            ext: '.json'\n          }\n        ]\n      },\n      yaml2json: {\n        files: [\n          {\n            expand: true,           // Enable dynamic expansion.\n            cwd: 'test/fixtures/',  // Src matches are relative to this path.\n            src: ['**/*.yaml'],      // Actual pattern(s) to match.\n            dest: 'tmp/result/',    // Destination path prefix.\n            ext: '.json'\n          }\n        ]\n      },\n      json2yml: {\n        files: [\n          {\n            expand: true,\n            cwd: 'test/fixtures/',\n            src: ['**/*.json'],\n            dest: 'tmp/result/',\n            ext: '.yml'\n          }\n        ]\n      },\n      json2yaml: {\n        files: [\n          {\n            expand: true,\n            cwd: 'test/fixtures/',\n            src: ['**/*.json'],\n            dest: 'tmp/result/',\n            ext: '.yaml'\n          }\n        ]\n      },\n      xml2json: {\n        files: [\n          {\n            expand: true,\n            cwd: 'test/fixtures/',\n            src: ['**/*.xml'],\n            dest: 'tmp/result/',\n            ext: '.json'\n          }\n        ]\n      },\n      xml2yml: {\n        files: [\n          {\n            expand: true,\n            cwd: 'test/fixtures/',\n            src: ['**/*.xml'],\n            dest: 'tmp/result/',\n            ext: '.yml'\n          }\n        ]\n      },\n      csv2json: {\n        src: ['test/fixtures/csv2json.csv'],\n        dest: 'tmp/result/csv2json.json'\n      },\n      json2csv: {\n        options: {\n          csv: {\n            header: true,\n            columns: ['id','lastname','firstname']\n          }\n        },\n        src: ['test/fixtures/json2csv.json'],\n        dest: 'tmp/result/json2csv.csv'\n      },\n      plist2json: {\n        files: [\n          {\n            expand: true,\n            cwd: 'test/fixtures/',\n            src: ['**/*.plist'],\n            dest: 'tmp/result/',\n            ext: '.json'\n          }\n        ]\n      },\n      json2plist: {\n        files: [\n          {\n            expand: true,\n            cwd: 'test/fixtures/',\n            src: ['**/*.json'],\n            dest: 'tmp/result/',\n            ext: '.plist'\n          }\n        ]\n      }\n    },\n    clean: {\n      tmp: ['tmp/result/*.{json,yml,csv,xml,plist}']\n    }\n  });\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-verb');\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // By default, lint and run all tests.\n  grunt.registerTask('test', ['jshint', 'convert']);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['clean', 'test', 'verb']);\n\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-convert/node_modules/grunt-convert/tasks/convert.js":"/*\n * grunt-convert\n * https://github.com/assemble/grunt-convert\n *\n * Copyright (c) 2014, Jon Schlinkert, contributors.\n * Licensed under the MIT license.\n */\n'use strict';\n\n module.exports = function(grunt) {\n\n  var plist = require('plist');\n  var YAML = require('yamljs');\n  var path = require('path');\n  var util = require('util');\n  var csv = require('csv');\n  var fs = require('fs');\n  var async = require('async');\n\n  grunt.registerMultiTask('convert', 'Convert to or from JSON, YAML, XML, PLIST or CSV', function() {\n\n    //Tell grunt that this is an async task\n    var done = this.async();\n\n    var options = this.options({\n      pretty: true,\n      mergeAttrs: true,\n      inline: 8,\n      indent: 2,\n      csv: {\n        columns: true,\n        delimiter: ','\n      }\n    });\n\n    if (options.type && options.type.indexOf('.') === -1) {\n      options.type = '.' + options.type;\n    }\n\n    grunt.verbose.writeflags(options, 'Options');\n\n    async.forEach(this.files, function (f, next) {\n\n      var handled = false;\n      var finish = function() {\n        if(!handled) {\n          // Write the destination file.\n          grunt.file.write(f.dest, data);\n          next();\n        }\n      };\n\n      if (f.src.length < 1) {\n        // No src files, issued warn and goto next target.\n        grunt.log.warn('Destination not written because no source files were found.');\n        next();\n        return;\n      }\n\n      var srcFiles = f.src.map(grunt.file.read).join(grunt.util.normalizelf(grunt.util.linefeed)),\n          srcExt = options.type ||path.extname(f.src[0]),\n          destExt = path.extname(f.dest),\n          data = srcFiles;\n\n      // source/destination same, goto next target.\n      if (srcExt === destExt) {\n        next();\n        return;\n      }\n\n      if (srcExt === '.csv') {\n\n        if (destExt === '.json') {\n          handled = true;\n          csv()\n            .from(srcFiles, options.csv)\n            .to.array( function( row ) {\n              data = JSON.stringify(row, null, options.indent);\n              grunt.file.write(f.dest, data);\n              finish();\n              next();\n          });\n        } else {\n          grunt.log.warn('CSV to XML or YAML converter not supported yet. Please use csv2json output to convert to XML or YAML. Sorry.');\n          return;\n        }\n\n      } else if (srcExt === '.xml') {\n\n        handled = true;\n        var parse = require('xml2js').parseString;\n        parse(srcFiles, options, function(err, result) {\n          if (err) {\n            grunt.fail.warn('File ' + f.dest.cyan + ' parsing errors: ' + err);\n          }\n          data = JSON.stringify(result, null, options.indent);\n          grunt.file.write(f.dest, data);\n          finish();\n          next();\n        });\n\n      } else if (srcExt === '.yml' || srcExt === '.yaml') {\n\n        data = JSON.stringify(YAML.load(f.src[0]), null, options.indent);\n\n      } else if (srcExt === '.plist') {\n\n        data = JSON.stringify(plist.parse(grunt.file.read(f.src[0])), null, options.indent);\n\n      }\n\n      // Check destination type\n      if (destExt === '.csv') {\n\n        data = JSON.parse(data);\n\n        handled = true;\n        csv()\n          .from(data)\n          .to(f.dest, options.csv)\n          .on('end', function() {\n            finish();\n            next();\n          });\n\n      } else if (destExt === '.xml') {\n\n        options.xml.header = options.header ? options.header : options.xml.header;\n\n        data = toXML(JSON.parse(data), options.xml);\n        data = (options.pretty) ? require('pretty-data').pd.xml(data) : data;\n\n      } else if (destExt === '.yml' || destExt === '.yaml') {\n\n        data = YAML.stringify(JSON.parse(data), options.inline, options.indent);\n        grunt.file.write(f.dest, data);\n\n      } else if (destExt === '.plist') {\n\n        data = plist.build(JSON.parse(data)).toString();\n\n      }\n\n      finish();\n      // Print a success message.\n      grunt.log.ok('File ' + f.dest.cyan + ' converted.' + ' OK'.green);\n    }, done);\n  });\n\n  var toXML = function xml(json, options) {\n\n      var XML_CHARACTER_MAP = {\n            '&': '&amp;',\n            '\"': '&quot;',\n             \"'\": '&apos;',\n            '<': '&lt;',\n            '>': '&gt;'\n          },\n          result = options.header ? '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' : '',\n          type = json.constructor.name;\n\n      options.header = false;\n\n      if(type==='Array'){\n        json.forEach(function(node){\n          result += xml(node, options);\n        });\n\n      } else if(type ==='Object' && typeof json === \"object\") {\n\n        Object.keys(json).forEach(function(key){\n          if(key!==options.attrkey){\n            var node = json[key],\n            attributes = '';\n\n            if(options.attrkey && json[options.attrkey]){\n              Object.keys(json[options.attrkey]).forEach(function(k){\n                attributes += util.format(' %s=\"%s\"', k, json[options.attrkey][k]);\n              });\n            }\n            var inner = xml(node,options);\n\n            if(inner){\n              result += util.format(\"<%s%s>%s</%s>\", key, attributes, xml(node,options), key);\n            } else {\n              result += util.format(\"<%s%s/>\", key, attributes);\n            }\n          }\n        });\n      } else {\n        return json.toString()\n        .replace(/([&\"<>''])/g, function(str, item) {\n          return XML_CHARACTER_MAP[item];\n        });\n      }\n\n      return result;\n    };\n};\n"}